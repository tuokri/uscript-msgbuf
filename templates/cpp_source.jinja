// Generated by uscript_msgbuf_generator. DO NOT EDIT.

#include "{{ class_name }}{{ cpp_hdr_extension }}"

namespace {{ cpp_namespace }}
{

{% for message in messages %}
{{ message.name }}::{{ message.name }}()
{% for field in message.fields %}
    {% if loop.is_first %} : {% else %} , {% endif %} m_{{ field.name }}()
{% endfor %}
{
}

std::vector<::umb::byte> {{ message.name }}::to_bytes() const
{
    std::vector<::umb::byte> v;
    v.reserve(0);
    {% include "cpp_encode_message.jinja" %}
    return v;
}

bool {{ message.name }}::to_bytes(std::span<::umb::byte> bytes) const
{
}

bool {{ message.name }}::from_bytes(const std::span<const ::umb::byte> bytes)
{
}

size_t {{ message.name }}::serialized_size() const
{
    size_t size;
{% for field in message.fields %}
    {% if field.type == "int" %}
    size += ::umb::g_sizeof_int; // {{ field.name }}
    {% else if field.type == "byte" %}
    size += ::umb::g_sizeof_byte; // {{ field.name }}
    {% else if field.type == "float" %}
    size += ::umb::g_sizeof_float; // {{ field.name }}
    {% else if field.type == "bytes" %}
    size += ::umb::g_dynamic_field_header_size;
    size += m_{{ field.name }}.size(); // {{ field.name }}
    {% else if field.type == "string" %}
    size += ::umb::g_dynamic_field_header_size;
    size += m_{{ field.name }}.size(); // {{ field.name }}
    {% else %}
        {{ error("invalid type: '", field.type, "' in ", message.name) }}
    {% endif %}
{% endfor %}
    return size;
}

{% endfor %}

} // {{ cpp_namespace }}
