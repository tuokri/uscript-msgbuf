{# Copyright (C) 2023-2024  Tuomo Kriikkula #}
{# This program is free software: you can redistribute it and/or modify #}
{#     it under the terms of the GNU Lesser General Public License as published #}
{# by the Free Software Foundation, either version 3 of the License, or #}
{# (at your option) any later version. #}
{# #}
{# This program is distributed in the hope that it will be useful, #}
{#     but WITHOUT ANY WARRANTY; without even the implied warranty of #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the #}
{# GNU Lesser General Public License for more details. #}
{# #}
{# You should have received a copy of the GNU Lesser General Public License #}
{#     along with this program.  If not, see <https://www.gnu.org/licenses/>. -#}
{% set in_pack = false %}
{% for field in message.fields %}
    {% if field.type == "int" %}
        ::umb::decode_int32(vi, bytes, m_{{ field.name }});
    {% else if field.type == "byte" %}
        ::umb::decode_byte(vi, bytes, m_{{ field.name }});
    {% else if field.type == "float" %}
        ::umb::decode_float(vi, bytes, m_{{ field.name }}, m_{{ field.name }}_serialized);
    {% else if field.type == "bytes" %}
        ::umb::decode_bytes(vi, bytes, m_{{ field.name }});
    {% else if field.type == "string" %}
        ::umb::decode_string(vi, bytes, m_{{ field.name }});
    {% else if field.type == "bool" %}
        {% if bp_is_packed(message, field.name) %}
            {% if not in_pack %}
                {% set in_pack = true %}
                ::umb::decode_packed_bools(vi, bytes,
                    m_{{ field.name }},
            {% else %}
                    m_{{ field.name }}{% if not bp_is_last(message.bool_packs, field.name) %},{% endif %}
                {% if bp_is_last(message.bool_packs, field.name) %}
                     );
                     {% set in_pack = false %}
                {% endif %}
            {% endif %}
        {% else %}
            ::umb::decode_bool(vi, bytes, m_{{ field.name }});
        {% endif %}
    {% else %}
        {{ error("invalid type: '", field.type, "' in ", message.name) }}
    {% endif %}
{% endfor %}
