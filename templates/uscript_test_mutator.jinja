{# Copyright (C) 2023  Tuomo Kriikkula #}
{# This program is free software: you can redistribute it and/or modify #}
{#     it under the terms of the GNU Lesser General Public License as published #}
{# by the Free Software Foundation, either version 3 of the License, or #}
{# (at your option) any later version. #}
{# #}
{# This program is distributed in the hope that it will be useful, #}
{#     but WITHOUT ANY WARRANTY; without even the implied warranty of #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the #}
{# GNU Lesser General Public License for more details. #}
{# #}
{# You should have received a copy of the GNU Lesser General Public License #}
{#     along with this program.  If not, see <https://www.gnu.org/licenses/>. -#}
// Generated by uscript_msgbuf_generator. DO NOT EDIT.
class {{ uscript_test_mutator }} extends Mutator
    config(Mutator_{{ uscript_test_mutator }})
    dependson({{ class_name }});

`include(UMBTests\Classes\UMBTestsMacros.uci);

// Not actual 32-bit float max range. UScript seems to struggle
// with values that are close to the real max values.
const FLOAT_MAX = 34028237000000000000000000000.f;
const FLOAT_MIN = 0.0000000000000000000000000001175494;

const PACKET_SIZE = {{ packet_size }};

var UMBTestsTcpLink Link;
{% for message in messages %}
var array<{{ message.name }}> MsgQueue_{{ message.name }};
var bool bClientServerDone_{{ message.name }};
var {{ message.name }} CmpMsg_{{ message.name }};
{% endfor %}

enum ETestState
{
    ETS_None,
{% for message in messages %}
    ETS_Sending_{{ message.name }},
    ETS_WaitingFor_{{ message.name }},
{% endfor %}
};

var ETestState TestState;

var int TotalFailures;
var int TotalMessagesToSend;
var int TotalMessagesReceived;
var int NumTestRounds;
var bool bDone;
var bool bLocalDone;
var array<byte> BytesToSend;

event Tick(float DeltaTime)
{
    super.Tick(DeltaTime);

    `ulog("TestState:" @ TestState, TestState != ETS_None);

    switch (TestState)
    {
{% for message in messages %}
    case ETS_Sending_{{ message.name }}:
        `ulog("MsgQueue_{{ message.name }}.Length:" @ MsgQueue_{{ message.name }}.Length);
        SendMsg_{{ message.name }}();
        break;
    case ETS_WaitingFor_{{ message.name }}:
        // TODO: This is kinda spaghetti-y. Consider refactoring.
        if (MessageReady_{{ message.name }}() || bClientServerDone_{{ message.name }})
        {
            TotalFailures += CheckMessage_{{ message.name }}();
        }
        break;
{% endfor %}
    default:
        return;
    }
}

function bool MutatorIsAllowed()
{
    return True;
}

function InitMutator(string Options, out string ErrorMessage)
{
    // TODO: parse options like number of test rounds to execute.

    `ulog("Options:" @ Options @ "ErrorMessage:" @ ErrorMessage);
    super.InitMutator(Options, ErrorMessage);
}

final static function string BytesToString(const out array<byte> Bytes)
{
    local string Str;
    local int I;

    Str = "[";
    for (I = 0; I < Bytes.Length; ++I)
    {
        Str $= string(int(Bytes[I]));
        if (I < (Bytes.Length - 1))
        {
            Str $= ",";
        }
    }
    Str = "]";

    return Str;
}

final static function array<byte> RandomBytes(int Size)
{
    local array<byte> Bytes;
    local int I;

    Bytes.Length = Size;
    for (I = 0; I < Size; ++I)
    {
        Bytes[I] = byte(Rand(256));
    }

    return Bytes;
}

final static function string RandomString(int Size)
{
    local string Str;
    local int I;

    Str = "";
    for (I = 0; I < Size; ++I)
    {
        Str $= Chr(Clamp(Rand(65536), 0, 65536));
    }

    return Str;
}

`define CHECK(Field, Value, Type, Msg1, Msg2, Failures, Bytes)              \n\
    `Msg1.`Field = `Value;                                                  \n\
    Bytes.Length = 0;                                                       \n\
    class'TestMessages'.static.`{Type}_ToMultiBytes(`Msg1, `Bytes);         \n\
    class'TestMessages'.static.`{Type}_FromMultiBytes(`Msg2, `Bytes);       \n\
    if (class'TestMessages'.static.`{Type}_NEQ(`Msg1, `Msg2))               \n\
    {                                                                       \n\
        `ulog("##CHECK FAILED##:" @ `Msg1.`Field @ "???" @ `Msg2.`Field);   \n\
        `ulog("~=" @ `Msg1.`Field ~= `Msg2.`Field);                         \n\
        `ulog("==" @ `Msg1 == `Msg2);                                       \n\
        `ulog("!=" @ `Msg1 != `Msg2);                                       \n\
        `ulog("BB" @ `Msg1.ByteVarX == `Msg2.ByteVarX);                     \n\
        ++`Failures;                                                        \n\
    }

final function int Test_StaticTests()
{
    local JustAnotherTestMessage Msg1;
    local JustAnotherTestMessage Msg2;
    local array<byte> Bytes;
    local int Failures;

    Failures = 0;

    // Check empty message.
    class'TestMessages'.static.JustAnotherTestMessage_ToMultiBytes(Msg1, Bytes);
    class'TestMessages'.static.JustAnotherTestMessage_FromMultiBytes(Msg2, Bytes);
    if (Msg1 != Msg2)
    {
        `ulog("##CHECK FAILED##: Empty JustAnotherTestMessage");
        ++Failures;
    }

    `CHECK(Some_floatVAR,  0.0,        JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR,  1.0,        JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -1.0,        JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -1.100000,   JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -1.111111,   JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR,  0.57485758, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR,  1.57485758, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -1.57485758, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -0.00000118, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR, -1.00000118, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR,  0.00000118, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)
    `CHECK(Some_floatVAR,  1.00000118, JustAnotherTestMessage, Msg1, Msg2, Failures, Bytes)

    return Failures;
}

{% for message in messages %}
{% set msg1 = "TESTVAR_" + message.name + "_Msg1" %}
{% set msg2 = "TESTVAR_" + message.name + "_Msg2" %}
{% set cls = "class'" + class_name + "'.static." %}
final function int Test_{{ message.name }}()
{
    local int Failures;
    local int X;
    local array<byte> DynamicBytes;
    local {{ message.name }} {{ msg1 }};
    local {{ message.name }} {{ msg2 }};
{% if message.has_static_size %}
    local byte StaticBytes[PACKET_SIZE];
    local byte StaticSize;
{% endif %}

    `ulog("running tests" @ "(" $ TimeStamp() $ ")" $ "...");

    Failures = 0;

{% for field in message.fields %}
    {% if field.type == "int" %}
    {{ msg1 }}.{{ field.name }} = Rand(MaxInt);
    if (FRand() > 0.5) {{ msg1 }}.{{ field.name }} *= -1;
    {% else if field.type == "float" %}
    {{ msg1 }}.{{ field.name }} = RandRange(FLOAT_MIN, FLOAT_MAX);
    {% else if field.type == "byte" %}
    {{ msg1 }}.{{ field.name }} = byte(Rand(256));
    {% else if field.type == "bool" %}
    {{ msg1 }}.{{ field.name }} = FRand() > 0.5;
    {% else if field.type == "bytes" %}
    {{ msg1 }}.{{ field.name }} = RandomBytes(Rand({{ max_dynamic_size }} + 1));
    {% else if field.type == "string" %}
    {{ msg1 }}.{{ field.name }} = RandomString(Rand({{ max_dynamic_size }} + 1));
    {% endif %}
{% endfor %}

{% if message.has_static_size %}
    StaticSize = {{ cls }}{{ message.name }}_ToBytes({{ msg1 }}, StaticBytes);
    `ulog("{{ message.name }}: StaticSize=" $ StaticSize);
    {{ cls }}{{ message.name }}_FromBytes({{ msg2 }}, StaticBytes);
    if ({{ msg1 }} != {{ msg2 }})
    {
        `ulog("##CHECK FAILED##: STATIC CODING: {{ msg1 }} != {{ msg2 }}");
    {% for field in message.fields %}
        {% if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
            @ "?"
            @ {{ cast_begin }}({{ msg2 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }
{% else %}
    // Skipping static checks for dynamic message.
{% endif %}

    {{ cls }}{{ message.name }}_ToMultiBytes({{ msg1 }}, DynamicBytes);
    `ulog("{{ message.name }}: DynamicBytes.Length =" @ DynamicBytes.Length);
    `ulog("{{ message.name }}: DynamicBytes[0]     =" @ string(DynamicBytes[0]));
    if ((DynamicBytes.Length < PACKET_SIZE) && (DynamicBytes.Length != DynamicBytes[0]))
    {
        `ulog("##CHECK FAILED##: DYNAMIC CODING: dynamic length mismatch");
        for (X = 0; X < Max(DynamicBytes.Length, DynamicBytes[0]); ++X)
        {
            `ulog(" ##CMP##:" @ X @ ToHex(DynamicBytes[X]));
        }
    {% for field in message.fields %}
        {% if field.type == "string" %}
            {% set cast_begin = "" %}
            {% set cast_end = "" %}
        {% else if field.type == "bytes" %}
            {% set cast_begin = "BytesToString" %}
            {% set cast_end = "" %}
        {% else if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }
    {{ cls }}{{ message.name }}_FromMultiBytes({{ msg2 }}, DynamicBytes);
    if ({{ msg1 }} != {{ msg2 }})
    {
        `ulog("##CHECK FAILED##: DYNAMIC CODING: {{ msg1 }} != {{ msg2 }}");
    {% for field in message.fields %}
        {% if field.type == "string" %}
            {% set cast_begin = "" %}
            {% set cast_end = "" %}
        {% else if field.type == "bytes" %}
            {% set cast_begin = "BytesToString" %}
            {% set cast_end = "" %}
        {% else if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
            @ "?"
            @ {{ cast_begin }}({{ msg2 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }

    if (Failures == 0)
    {
        MsgQueue_{{ message.name }}.AddItem({{ msg1 }});
    }

    return Failures;
}

{% endfor -%}

function PreBeginPlay()
{
    local int Failures;
    local int Round;
    local int I;

    `ulog(self @ "initialized");

    super.PreBeginPlay();

    Round = 0;
    Failures = 0;

    Link = Spawn(class'UMBTestsTcpLink', self);
    if (Link == None)
    {
        `ulog("##ERROR##: Failed to spawn UMBTestsTcpLink");
        Failures += 1;
    }
    else
    {
        Link.TargetHost = "127.0.0.1";
        Link.TargetPort = 55555;
        Link.ConnectToServer();
    }

    // Local tests with hard-coded data.
    `ulog("##########################################");
    `ulog("##BEGIN TEST##: StaticTests");
    Failures += Test_StaticTests();
    `ulog("##END TEST##");
    `ulog("##########################################");

    // Local tests with random data. No networking.
    for (Round = 0; Round < NumTestRounds; ++Round)
    {
{% for message in messages %}
        `ulog("##########################################");
        `ulog("##BEGIN TEST##: Round=" $ Round);
        Failures += Test_{{ message.name }}();
        `ulog("##END TEST##");
        `ulog("##########################################");
{% endfor %}
    }

    `ulog("##TEST RESULTS##: Failures=" $ Failures);
    if (Failures > 0)
    {
        `ulog("##TEST RESULTS##: LOCAL TEST SUITE(S) FAILED");
        `log("Test failures detected!",, 'Error');
    }
    else
    {
        `ulog("##TEST RESULTS##: ALL LOCAL TESTS PASSED");
    }

    TotalFailures = Failures;

    bLocalDone = True;

    SetTimer(0.5, True, nameof(Quit));
}

function PostBeginPlay()
{
    super.PostBeginPlay();

    RunClientServerTests();
}

{% for message in messages %}
final function SendMsg_{{ message.name }}()
{
    local {{ message.name }} Msg;

    if (MsgQueue_{{ message.name }}.Length > 0)
    {
        Msg = MsgQueue_{{ message.name }}[MsgQueue_{{ message.name }}.Length - 1];
        class'{{ class_name }}'.static.{{ message.name }}_ToMultiBytes(Msg, BytesToSend);
        MsgQueue_{{ message.name }}.Remove(MsgQueue_{{ message.name }}.Length - 1, 1);
        CmpMsg_{{ message.name }} = Msg;
        Link.SendBytes(BytesToSend);
    }
    else
    {
        bClientServerDone_{{ message.name }} = True;
    }

    TestState = ETS_WaitingFor_{{ message.name }};
}

{% set mt = "class'" + class_name + "'.const." + uscript_message_type_prefix + "_" + message.name %}
final function bool MessageReady_{{ message.name }}()
{
    return Link.MessageType == {{ mt }};
}

/*
// TODO: move this check to a dedicated function! E.g. final test state.
`ulog("### ### ### ### ### ### ### ### ### ### ### ### ### ###");
`ulog("TotalMessagesToSend   :" @ TotalMessagesToSend);
`ulog("TotalMessagesReceived :" @ TotalMessagesReceived);
`ulog("### ### ### ### ### ### ### ### ### ### ### ### ### ###");
TotalFailures += int(TotalMessagesToSend == TotalMessagesReceived);

`ulog("##TOTAL TEST RESULTS##: TotalFailures=" $ TotalFailures);
if (TotalFailures > 0)
{
    `ulog("##TOTAL TEST RESULTS##: TEST SUITE(S) FAILED");
}
else
{
    `ulog("##TOTAL TEST RESULTS##: ALL TESTS PASSED");
}

// Done with all message types, exit.
TestState = ETS_None;
bDone = True;
`ulog("quitting");
ConsoleCommand("QUIT", True);
*/

final function int CheckMessage_{{ message.name }}()
{
    local int Failures;
    local {{ message.name }} Msg;

    Failures = 0;

    if (bClientServerDone_{{ message.name }})
    {
        Link.MessageType = class'{{ class_name }}'.const.EMT_None;
        Link.Size = 0;
        Link.Part = 0;

    {% if loop.is_last %}
        // Done with all message types, exit. TODO: move exit away from here.
        Link.Close();
        TestState = ETS_None;
        bDone = True;
    {% else %}
        // Done with this type. Move to the next type's queue.
        TestState = ETS_Sending_{{ at(messages, loop.index + 1).name }};
    {% endif %}

        return Failures;
    }
    else
    {
        TestState = ETS_Sending_{{ message.name }};
    }

    // TODO: read from link and compare.

    if (Link.MessageType != {{ mt }})
    {
        `ulog("##ERROR##: wrong MessageType, expected {{ mt }}, got" @ Link.MessageType);
        ++Failures;
    }

    // TODO: do both, FromBytes and FromMultiBytes for static messages.
    //   Only do FromMultiBytes for dynamic messages.
    {% if message.has_static_size %}
    class'{{ class_name }}'.static.{{ message.name }}_FromBytes(Msg, Link.RecvMsgBufStatic);
    {% endif %}
    // TODO: (also) read multi bytes.

    // TODO: MAKE MESSAGE COMPARISON INTO A MACRO AND/OR FUNCTION!
    // TODO: CHECK EARLIER COMPARISON IMPL. ABOVE!
    // TODO: CURRENTLY ONLY CHECKING STATIC MESSAGES!!!
    if (Msg != CmpMsg_{{ message.name }} && Link.bIsStatic)
    {
        `ulog("##ERROR##: FAILED CMP, TODO: BETTER MESSAGE");
    {% if message.has_static_size %}
        {% for field in message.fields %}
            {% if field.type == "byte" %}
                {% set cast_begin = "string(int" %}
                {% set cast_end = ")" %}
            {% else %}
                {% set cast_begin = "string" %}
                {% set cast_end = "" %}
            {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}(Msg.{{ field.name }}){{ cast_end }}
            @ "?"
            @ {{ cast_begin }}(CmpMsg_{{ message.name }}.{{ field.name }}){{ cast_end }}
        );
        {% endfor %}
    {% else %}
        // TODO: dynamic comparison prints.
    {% endif %}
        ++Failures;
    }

    Link.MessageType = class'{{ class_name }}'.const.EMT_None;
    Link.Size = 0;
    Link.Part = 0;

    ++TotalMessagesReceived;

    return Failures;
}

{% endfor -%}

final function RunClientServerTests()
{
    if (Link.LinkState != STATE_Connected)
    {
        `ulog("Link not connected yet, state:" @ Link.LinkState);
        SetTimer(0.01, False, nameof(RunClientServerTests));
        return;
    }

    TotalMessagesToSend = 0;

{% for message in messages %}
    TotalMessagesToSend += MsgQueue_{{ message.name }}.Length;
{% endfor %}
    `ulog("TotalMessagesToSend:" @ TotalMessagesToSend);

    TestState = ETS_Sending_{{ messages.0.name }};
}

final function Quit()
{
    if (bDone)
    {
        `ulog("quitting");
        ConsoleCommand("QUIT", True);
    }
}

DefaultProperties
{
    TotalFailures=0
    NumTestRounds=50
    bDone=False
    bLocalDone=False
{% for message in messages %}
    bClientServerDone_{{ message.name }}=False
{% endfor %}
}
