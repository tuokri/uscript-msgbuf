{# Copyright (C) 2023  Tuomo Kriikkula #}
{# This program is free software: you can redistribute it and/or modify #}
{#     it under the terms of the GNU Lesser General Public License as published #}
{# by the Free Software Foundation, either version 3 of the License, or #}
{# (at your option) any later version. #}
{# #}
{# This program is distributed in the hope that it will be useful, #}
{#     but WITHOUT ANY WARRANTY; without even the implied warranty of #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the #}
{# GNU Lesser General Public License for more details. #}
{# #}
{# You should have received a copy of the GNU Lesser General Public License #}
{#     along with this program.  If not, see <https://www.gnu.org/licenses/>. -#}
// Generated by uscript_msgbuf_generator. DO NOT EDIT.
class {{ uscript_test_mutator }} extends Mutator
    config(Mutator_{{ uscript_test_mutator }})
    dependson({{ class_name }});

`include(UMBTests\Classes\UMBTestsMacros.uci);

// Not actual 32-bit float max range. UScript seems to struggle
// with values that are close to the real max values.
const FLOAT_MAX = 34028237000000000000000000000.f;
const FLOAT_MIN = 0.0000000000000000000000000001175494;

const PACKET_SIZE = {{ packet_size }};

var UMBTestsTcpLink Link;

var int NumTestRounds;
var bool bDone;

function bool MutatorIsAllowed()
{
    return True;
}

function InitMutator(string Options, out string ErrorMessage)
{
    // TODO: parse options like number of test rounds to execute.

    `ulog("Options:" @ Options @ "ErrorMessage:" @ ErrorMessage);
    super.InitMutator(Options, ErrorMessage);
}

final static function string BytesToString(const out array<byte> Bytes)
{
    local string Str;
    local int I;

    Str = "[";
    for (I = 0; I < Bytes.Length; ++I)
    {
        Str $= string(int(Bytes[I]));
        if (I < (Bytes.Length - 1))
        {
            Str $= ",";
        }
    }
    Str = "]";

    return Str;
}

final static function array<byte> RandomBytes(int Size)
{
    local array<byte> Bytes;
    local int I;

    Bytes.Length = Size;
    for (I = 0; I < Size; ++I)
    {
        Bytes[I] = byte(Rand(256));
    }

    return Bytes;
}

final static function string RandomString(int Size)
{
    local string Str;
    local int I;

    Str = "";
    for (I = 0; I < Size; ++I)
    {
        Str $= Chr(Clamp(Rand(65536), 0, 65536));
    }

    return Str;
}

// final function SendBytes(
//     const out Bytes[PACKET_SIZE])
// {
//
// }

{% for message in messages %}
{% set msg1 = "TESTVAR_" + message.name + "_Msg1" %}
{% set msg2 = "TESTVAR_" + message.name + "_Msg2" %}
{% set cls = "class'" + class_name + "'.static." %}
final simulated function int Test_{{ message.name }}()
{
    local int Failures;
    local int X;
    local {{ message.name }} {{ msg1 }};
    local {{ message.name }} {{ msg2 }};
{% if message.has_static_size %}
    local byte StaticBytes[PACKET_SIZE];
    local byte StaticSize;
{% endif %}
    local array<byte> DynamicBytes;

    `ulog("running tests" @ "(" $ TimeStamp() $ ")" $ "...");

    Failures = 0;

{% for field in message.fields %}
    {% if field.type == "int" %}
    {{ msg1 }}.{{ field.name }} = Rand(MaxInt);
    {% else if field.type == "float" %}
    {{ msg1 }}.{{ field.name }} = RandRange(FLOAT_MIN, FLOAT_MAX);
    {% else if field.type == "byte" %}
    {{ msg1 }}.{{ field.name }} = byte(Rand(256));
    {% else if field.type == "bool" %}
    {{ msg1 }}.{{ field.name }} = FRand() > 0.5;
    {% else if field.type == "bytes" %}
    {{ msg1 }}.{{ field.name }} = RandomBytes(Rand({{ max_dynamic_size }} + 1));
    {% else if field.type == "string" %}
    {{ msg1 }}.{{ field.name }} = RandomString(Rand({{ max_dynamic_size }} + 1));
    {% endif %}
{% endfor %}

{% if message.has_static_size %}
    StaticSize = {{ cls }}{{ message.name }}_ToBytes({{ msg1 }}, StaticBytes);
    `ulog("{{ message.name }}: StaticSize=" $ StaticSize);
    {{ cls }}{{ message.name }}_FromBytes({{ msg2 }}, StaticBytes);
    if ({{ msg1 }} != {{ msg2 }})
    {
        `ulog("##CHECK FAILED##: STATIC CODING: {{ msg1 }} != {{ msg2 }}");
    {% for field in message.fields %}
        {% if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
            @ "?"
            @ {{ cast_begin }}({{ msg2 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }
{% else %}
    // Skipping static checks for dynamic message.
{% endif %}

    {{ cls }}{{ message.name }}_ToMultiBytes({{ msg1 }}, DynamicBytes);
    `ulog("{{ message.name }}: DynamicBytes.Length =" @ DynamicBytes.Length);
    `ulog("{{ message.name }}: DynamicBytes[0]     =" @ string(DynamicBytes[0]));
    if ((DynamicBytes.Length < PACKET_SIZE) && (DynamicBytes.Length != DynamicBytes[0]))
    {
        `ulog("##CHECK FAILED##: DYNAMIC CODING: dynamic length mismatch");
        for (X = 0; X < Max(DynamicBytes.Length, DynamicBytes[0]); ++X)
        {
            `ulog(" ##CMP##:" @ X @ ToHex(DynamicBytes[X]));
        }
    {% for field in message.fields %}
        {% if field.type == "string" %}
            {% set cast_begin = "" %}
            {% set cast_end = "" %}
        {% else if field.type == "bytes" %}
            {% set cast_begin = "BytesToString" %}
            {% set cast_end = "" %}
        {% else if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }
    {{ cls }}{{ message.name }}_FromMultiBytes({{ msg2 }}, DynamicBytes);
    if ({{ msg1 }} != {{ msg2 }})
    {
        `ulog("##CHECK FAILED##: DYNAMIC CODING: {{ msg1 }} != {{ msg2 }}");
    {% for field in message.fields %}
        {% if field.type == "string" %}
            {% set cast_begin = "" %}
            {% set cast_end = "" %}
        {% else if field.type == "bytes" %}
            {% set cast_begin = "BytesToString" %}
            {% set cast_end = "" %}
        {% else if field.type == "byte" %}
            {% set cast_begin = "string(int" %}
            {% set cast_end = ")" %}
        {% else %}
            {% set cast_begin = "string" %}
            {% set cast_end = "" %}
        {% endif %}
        `ulog(" ##CMP##: {{ field.name }}:"
            @ {{ cast_begin }}({{ msg1 }}.{{ field.name }}){{ cast_end }}
            @ "?"
            @ {{ cast_begin }}({{ msg2 }}.{{ field.name }}){{ cast_end }}
        );
    {% endfor %}
        ++Failures;
    }

    return Failures;
}
{% endfor %}

function PreBeginPlay()
{
    local int Failures;
    local int Round;

    `ulog(self @ "initialized");

    super.PreBeginPlay();

    Round = 0;
    Failures = 0;

    Link = Spawn(class'UMBTestsTcpLink', self);
    if (Link == None)
    {
        `ulog("##ERROR##: Failed to spawn UMBTestsTcpLink");
        Failures += 1;
    }

    for (Round = 0; Round < NumTestRounds; ++Round)
    {
{% for message in messages %}
        `ulog("##########################################");
        `ulog("##BEGIN TEST##: Round=" $ Round);
        Failures += Test_{{ message.name }}();
        `ulog("##END TEST##");
        `ulog("##########################################");
{% endfor %}
    }

    `ulog("##TEST RESULTS##: Failures=" $ Failures);
    if (Failures > 0)
    {
        `ulog("##TEST RESULTS##: TEST SUITE(S) FAILED");
    }
    else
    {
        `ulog("##TEST RESULTS##: ALL TESTS PASSED");
    }

    `ulog("quitting");
    ConsoleCommand("QUIT", True);

    bDone = True;
    SetTimer(2.0, True, nameof(Quit));
}

final function Quit()
{
    if (bDone)
    {
        ConsoleCommand("QUIT", True);
    }
}

DefaultProperties
{
    NumTestRounds=50
    bDone=False
}
