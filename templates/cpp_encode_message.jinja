{# Copyright (C) 2023  Tuomo Kriikkula #}
{# This program is free software: you can redistribute it and/or modify #}
{#     it under the terms of the GNU Lesser General Public License as published #}
{# by the Free Software Foundation, either version 3 of the License, or #}
{# (at your option) any later version. #}
{# #}
{# This program is distributed in the hope that it will be useful, #}
{#     but WITHOUT ANY WARRANTY; without even the implied warranty of #}
{# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the #}
{# GNU Lesser General Public License for more details. #}
{# #}
{# You should have received a copy of the GNU Lesser General Public License #}
{#     along with this program.  If not, see <https://www.gnu.org/licenses/>. -#}
{% set in_pack = false %}
    // TODO: for multipart packets, the sender is responsible for splitting the
    //   messages. Document this requirement better somewhere.
    *vi++ = static_cast<::umb::byte>(std::clamp(size, ZERO_SIZE, ::umb::g_packet_size));
    *vi++ =
{% if message.always_single_part %}
    ::umb::g_part_single_part
{% else %}
    (serialized_size() <= ::umb::g_packet_size) ? ::umb::g_part_single_part : 0
{% endif %}; // Part.
    const auto message_type = static_cast<uint16_t>(type());
    ::umb::encode_uint16(message_type, vi);
{% for field in message.fields %}
    {% if field.type == "int" %}
        ::umb::encode_int32(m_{{ field.name }}, vi);
    {% else if field.type == "byte" %}
        ::umb::encode_byte(m_{{ field.name }}, vi);
    {% else if field.type == "float" %}
        ::umb::encode_float_str(m_{{ field.name }}_serialized, vi);
    {% else if field.type == "bytes" %}
        ::umb::encode_bytes(m_{{ field.name }}, vi);
    {% else if field.type == "string" %}
        ::umb::encode_string(m_{{ field.name }}, vi);
    {% else if field.type == "bool" %}
        {% if bp_is_packed(message, field.name) %}
            {% if not in_pack %}
                {% set in_pack = true %}
                ::umb::encode_packed_bools(vi,
                    m_{{ field.name }},
            {% else %}
                    m_{{ field.name }}{% if not bp_is_last(message.bool_packs, field.name) %},{% endif %}
                {% if bp_is_last(message.bool_packs, field.name) %}
                     );
                     {% set in_pack = false %}
                {% endif %}
            {% endif %}
        {% else %}
            ::umb::encode_bool(m_{{ field.name }}, vi);
        {% endif %}
    {% else %}
        {{ error("invalid type: '", field.type, "' in ", message.name) }}
    {% endif %}
{% endfor %}
