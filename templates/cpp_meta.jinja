namespace {{ cpp_namespace }}::meta
{

template<::{{ cpp_namespace }}::MessageType MT>
class Message
{
public:
    [[nodiscard]] static constexpr size_t static_size()
    {
{% for message in messages %}
        if constexpr (MT == ::{{ cpp_namespace }}::MessageType::{{ message.name }})
        {
    {% if message.has_static_size %}
            return {{ message.static_size }};
    {% else %}
            static_assert(::umb::meta::always_false<MT>::value, "{{ message.name }} is not static");
    {% endif %}
        }
{% endfor %}
        else
        {
            static_assert(::umb::meta::always_false<MT>::value, "invalid MessageType");
        }
    }

    template<size_t N>
    [[nodiscard]] static constexpr ::umb::meta::Field field()
    {
{% for message in messages %}
        if constexpr (MT == ::{{ cpp_namespace }}::MessageType::{{ message.name }})
        {
            {% for field in message.fields %}
            if constexpr (N == {{ loop.index }})
            {
                return _field_{{ message.name }}_{{ field.name }}_{{ loop.index }};
            }
            {% endfor %}
            else
            {
                static_assert(::umb::meta::always_false<N>::value);
            }
        }
        else
        {
            static_assert(::umb::meta::always_false<N>::value);
        }
{% endfor %}
    }

private:
{% for message in messages %}
    {% for field in message.fields %}
    static constexpr auto _field_{{ message.name }}_{{ field.name }}_name = "{{ field.name }}";
    static constexpr ::umb::meta::Field _field_{{ message.name }}_{{ field.name }}_{{ loop.index }} = {
        .type = ::umb::meta::FieldType::{{ meta_field_type(field.type) }},
        .name = _field_{{ message.name }}_{{ field.name }}_name
    };
    {% endfor %}
{% endfor %}
};

} // namespace {{ cpp_namespace }}::meta
